<?php
  require_once './inc/core/zinc_cli/cli_outputs.php';
  function trimds( $s ) {
    return rtrim( $s, DIRECTORY_SEPARATOR );
  }
  function joinpaths() {
    return implode( DIRECTORY_SEPARATOR, array_map( 'trimds', func_get_args() ) );
  }

  if( ! file_exists( './environment.json' ) ) {
    $env = false;
  } else {
    $env = json_decode( file_get_contents('./environment.json' ) );
  }

  /**
   * The current action command.
   */
  if( isset( $argv[ 1 ] ) ) {
    $thisArg = strtolower( trim( $argv[ 1 ] ) );
  } else {
    $thisArg = '';
  }

  /**
   * Create a new environment.json file.
   */
  if( $thisArg == 'env:new' ) {
    // Check if a env file already exists.
    if( file_exists( './environment.json' ) ) {
      echo "\nenvironment.json already exists, do you want to overwrite?(Y/n) ";
      $handle = fopen( "php://stdin", "r" );
      $cont   = trim( fgets( $handle ) );
      if( strtolower( $cont ) == 'y' ) {
        echo "\nOverwriting environment.json file ...\n\n";
      } else {
        echo "\nAction canceled\n\n";
        exit();
      }
    }
    // Create the new environment.json file.
    $default_env = json_decode( file_get_contents( './inc/core/structures/environment.json.example' ) );
    $default_env->secret_keys = bin2hex( random_bytes( 64 ) );
    file_put_contents( './environment.json', json_encode( $default_env, JSON_PRETTY_PRINT ) );
    echo \OuputCLI\success( "Environment document has created." );
    \OuputCLI\nl();
    exit();
  }

  if( $env === false ) {
print "
  ".\OuputCLI\danger( "ERROR" )."No environment document was found!
  ".\OuputCLI\warn( "TIPS " )."Run this command ".\OuputCLI\success( 'php zinc env:new' )."to generate a new env file.\n
";
    exit();
  }

  if ( strtolower( $env->environment ) !== 'local' ) exit( \OuputCLI\warn( "\nZincPHP CLI can't run when it is not in local environment\n\n" ) );

  /**
   * Serve as a localserver.
   */
  if( $thisArg == 'serve' ) {
    $_host = '127.0.0.1';   // Default host
    $_port = '8585';        // Default port
    foreach( $argv as $index => $arg ) {
      if( $index > 1 ) {
        if( strtolower( trim( $arg ) ) == '--host' ) $_host = $argv[ $index + 1 ];
        if( strtolower( trim( $arg ) ) == '--port' ) $_port = $argv[ $index + 1 ];
      }
    }
    echo "\n" . 'Server is running at http://' . $_host . ':' . $_port . "\n\n";
    chdir( joinpaths( getcwd(), '/public' ) );
    shell_exec( 'php -S ' . $_host . ':' . $_port );
  }

  /**
   * Generate a new secret token.
   */
  if( $thisArg == 'key:generate' ) {
    $env->secret_keys = bin2hex( random_bytes( 64 ) );
    file_put_contents( './environment.json', json_encode( $env, JSON_PRETTY_PRINT ) );
    echo "\nSecrent key has generated\n\n";
    exit();
  }

  /**
   * Add a new domain to allow CORS
   */
  if( $thisArg == 'cors:add' ) {
    echo "\nAdding a new domain to allowed CORS list.\nType the domain name here (Example: 127.0.0.1:2010 or example.com - no http://)\n> ";
    $handle = fopen( "php://stdin", "r" );
    $domain = trim( fgets( $handle ) );
    if( ! empty( $domain ) ) {
      $env->cors_allowed[] = 'http://' . $domain;
      file_put_contents( './environment.json', json_encode( $env, JSON_PRETTY_PRINT ) );
      echo "\nDomain( " . $domain . " ) was added to allowed CORS list.\n\n";
    } else {
      echo "\nUnable to add a domain to allowed CORS list.\n\n";
    }
    exit();
  }

  /**
   * Zinc command to create a new block.
   */
  if( $thisArg == 'make:block' ) {
    require_once './inc/core/zinc_cli/block/make-block.php';
  }

  /**
   * Make a new migration file.
   */
  if( $thisArg == 'make:migration' ) {
    require_once './inc/core/zinc_cli/migration/makeMigration.php';
  }

  if( $thisArg == 'migrate' ) {
    require_once './inc/core/zinc_cli/migration/migration.php';
  }

  /**
   * Default ZincPHP CLI welcome message.
   */
  echo "

    Welcome to ZincPHP!
    GitHub: https://github.com/rakibtg/ZincPHP

    Run 'php zinc help' to learn more :)


  ";
